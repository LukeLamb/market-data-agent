apiVersion: v1
kind: Namespace
metadata:
  name: api-analytics
  labels:
    name: api-analytics
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-analytics-config
  namespace: api-analytics
  labels:
    app: api-analytics
data:
  config.yaml: |
    # API Analytics Configuration

    analytics:
      # Data collection settings
      collection:
        enabled: true
        sampling_rate: 1.0  # Collect 100% of requests initially
        buffer_size: 10000
        flush_interval: "30s"

        # Metrics to collect
        metrics:
          - name: "request_count"
            type: "counter"
            labels: ["method", "path", "status_code", "consumer_id"]

          - name: "request_duration"
            type: "histogram"
            labels: ["method", "path", "status_code"]
            buckets: [0.1, 0.5, 1.0, 2.5, 5.0, 10.0, 30.0]

          - name: "request_size"
            type: "histogram"
            labels: ["method", "path"]
            buckets: [1024, 4096, 16384, 65536, 262144, 1048576]

          - name: "response_size"
            type: "histogram"
            labels: ["method", "path", "status_code"]
            buckets: [1024, 4096, 16384, 65536, 262144, 1048576]

          - name: "error_rate"
            type: "gauge"
            labels: ["service", "path"]

          - name: "active_connections"
            type: "gauge"
            labels: ["service"]

        # Custom events
        events:
          - name: "authentication_failure"
            type: "security"
            severity: "warning"

          - name: "rate_limit_exceeded"
            type: "performance"
            severity: "info"

          - name: "unusual_traffic_pattern"
            type: "security"
            severity: "critical"

      # Storage configuration
      storage:
        primary:
          type: "timescaledb"
          connection:
            host: "timescaledb.market-data.svc.cluster.local"
            port: 5432
            database: "api_analytics"
            username: "analytics_user"
            password_file: "/etc/secrets/analytics/db-password"
          retention: "90d"

        cache:
          type: "redis"
          connection:
            host: "redis.market-data.svc.cluster.local"
            port: 6379
            database: 5
            password_file: "/etc/secrets/analytics/redis-password"
          ttl: "1h"

      # Real-time analytics
      realtime:
        enabled: true
        window_size: "5m"
        aggregation_interval: "1m"

        # Real-time alerts
        alerts:
          - name: "high_error_rate"
            condition: "error_rate > 0.05"  # 5%
            duration: "2m"
            severity: "warning"

          - name: "response_time_spike"
            condition: "avg(request_duration) > 5.0"  # 5 seconds
            duration: "3m"
            severity: "critical"

          - name: "unusual_traffic_volume"
            condition: "rate(request_count) > baseline * 3"
            duration: "5m"
            severity: "warning"

      # Reporting
      reporting:
        enabled: true
        schedule:
          daily: "0 6 * * *"    # 6 AM daily
          weekly: "0 6 * * 1"   # 6 AM every Monday
          monthly: "0 6 1 * *"  # 6 AM first day of month

        reports:
          - name: "api_usage_summary"
            type: "summary"
            recipients: ["api-team@market-data.example.com"]

          - name: "performance_report"
            type: "performance"
            recipients: ["devops@market-data.example.com"]

          - name: "security_incidents"
            type: "security"
            recipients: ["security@market-data.example.com"]

      # API Intelligence
      intelligence:
        # Usage pattern analysis
        pattern_analysis:
          enabled: true
          learning_window: "7d"
          anomaly_threshold: 2.0  # Standard deviations

        # Consumer behavior analysis
        consumer_analysis:
          enabled: true
          track_usage_patterns: true
          identify_heavy_users: true
          usage_recommendations: true

        # Performance optimization
        optimization:
          enabled: true
          cache_recommendations: true
          rate_limit_optimization: true
          resource_allocation_insights: true

  dashboards.json: |
    {
      "dashboards": [
        {
          "name": "API Gateway Overview",
          "description": "High-level API gateway metrics",
          "panels": [
            {
              "title": "Request Rate",
              "type": "graph",
              "query": "rate(kong_http_requests_total[5m])",
              "targets": ["kong-proxy"]
            },
            {
              "title": "Response Time Distribution",
              "type": "histogram",
              "query": "histogram_quantile(0.95, kong_request_duration_bucket)",
              "targets": ["kong-proxy"]
            },
            {
              "title": "Error Rate",
              "type": "stat",
              "query": "rate(kong_http_requests_total{code!~\"2..\"}[5m]) / rate(kong_http_requests_total[5m])",
              "thresholds": [0.01, 0.05]
            },
            {
              "title": "Top APIs by Traffic",
              "type": "table",
              "query": "topk(10, sum by (service) (rate(kong_http_requests_total[1h])))"
            }
          ]
        },
        {
          "name": "Service Performance",
          "description": "Service-specific performance metrics",
          "panels": [
            {
              "title": "Market Data API Performance",
              "type": "graph",
              "query": "rate(kong_http_requests_total{service=\"market-data-service\"}[5m])"
            },
            {
              "title": "Analytics API Performance",
              "type": "graph",
              "query": "rate(kong_http_requests_total{service=\"analytics-service\"}[5m])"
            },
            {
              "title": "Inter-Agent Communication",
              "type": "graph",
              "query": "rate(kong_http_requests_total{service=\"inter-agent-router\"}[5m])"
            }
          ]
        },
        {
          "name": "Security Metrics",
          "description": "Security and authentication metrics",
          "panels": [
            {
              "title": "Authentication Failures",
              "type": "stat",
              "query": "rate(kong_http_requests_total{code=\"401\"}[5m])"
            },
            {
              "title": "Rate Limiting Events",
              "type": "graph",
              "query": "rate(kong_http_requests_total{code=\"429\"}[5m])"
            },
            {
              "title": "Blocked IPs",
              "type": "table",
              "query": "topk(10, sum by (client_ip) (rate(kong_http_requests_total{code=\"403\"}[1h])))"
            }
          ]
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-analytics-processor
  namespace: api-analytics
  labels:
    app: api-analytics
    component: processor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-analytics
      component: processor
  template:
    metadata:
      labels:
        app: api-analytics
        component: processor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9092"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-analytics
      securityContext:
        runAsNonRoot: true
        runAsUser: 10002
        runAsGroup: 10002
        fsGroup: 10002
      containers:
      - name: analytics-processor
        image: market-data/api-analytics-processor:1.0.0
        ports:
        - name: http
          containerPort: 8082
          protocol: TCP
        - name: metrics
          containerPort: 9092
          protocol: TCP
        env:
        - name: CONFIG_FILE
          value: "/etc/config/api-analytics/config.yaml"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-analytics-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-analytics-secrets
              key: redis-password
        volumeMounts:
        - name: config
          mountPath: /etc/config/api-analytics
          readOnly: true
        - name: secrets
          mountPath: /etc/secrets/analytics
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: api-analytics-config
      - name: secrets
        secret:
          secretName: api-analytics-secrets
          defaultMode: 0400
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-analytics-dashboard
  namespace: api-analytics
  labels:
    app: api-analytics
    component: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-analytics
      component: dashboard
  template:
    metadata:
      labels:
        app: api-analytics
        component: dashboard
    spec:
      serviceAccountName: api-analytics
      securityContext:
        runAsNonRoot: true
        runAsUser: 10003
        runAsGroup: 10003
        fsGroup: 10003
      containers:
      - name: analytics-dashboard
        image: market-data/api-analytics-dashboard:1.0.0
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GRAFANA_CONFIG_FILE
          value: "/etc/config/dashboard/dashboards.json"
        - name: PROMETHEUS_URL
          value: "http://prometheus.monitoring.svc.cluster.local:9090"
        - name: ANALYTICS_API_URL
          value: "http://api-analytics-processor.api-analytics.svc.cluster.local:8082"
        volumeMounts:
        - name: config
          mountPath: /etc/config/dashboard
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: api-analytics-config
---
apiVersion: v1
kind: Service
metadata:
  name: api-analytics-processor
  namespace: api-analytics
  labels:
    app: api-analytics
    component: processor
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8082
    protocol: TCP
  - name: metrics
    port: 9092
    targetPort: 9092
    protocol: TCP
  selector:
    app: api-analytics
    component: processor
---
apiVersion: v1
kind: Service
metadata:
  name: api-analytics-dashboard
  namespace: api-analytics
  labels:
    app: api-analytics
    component: dashboard
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app: api-analytics
    component: dashboard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-analytics
  namespace: api-analytics
  labels:
    app: api-analytics
---
apiVersion: v1
kind: Secret
metadata:
  name: api-analytics-secrets
  namespace: api-analytics
  labels:
    app: api-analytics
type: Opaque
data:
  db-password: YW5hbHl0aWNzX3Bhc3N3b3Jk # analytics_password
  redis-password: cmVkaXNfcGFzc3dvcmQ= # redis_password
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-analytics-dashboard-ingress
  namespace: api-analytics
  labels:
    app: api-analytics
  annotations:
    kubernetes.io/ingress.class: kong
    konghq.com/plugins: jwt-auth,cors-policy
    konghq.com/strip-path: "true"
spec:
  rules:
  - host: analytics.market-data.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-analytics-dashboard
            port:
              number: 80
  tls:
  - hosts:
    - analytics.market-data.example.com
    secretName: analytics-dashboard-tls
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: api-analytics-reports
  namespace: api-analytics
  labels:
    app: api-analytics
    component: reports
spec:
  schedule: "0 6 * * *"  # Daily at 6 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: api-analytics
            component: reports
        spec:
          serviceAccountName: api-analytics
          restartPolicy: OnFailure
          containers:
          - name: report-generator
            image: market-data/api-analytics-reports:1.0.0
            env:
            - name: CONFIG_FILE
              value: "/etc/config/api-analytics/config.yaml"
            - name: REPORT_TYPE
              value: "daily"
            volumeMounts:
            - name: config
              mountPath: /etc/config/api-analytics
              readOnly: true
            - name: secrets
              mountPath: /etc/secrets/analytics
              readOnly: true
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 200m
                memory: 256Mi
          volumes:
          - name: config
            configMap:
              name: api-analytics-config
          - name: secrets
            secret:
              secretName: api-analytics-secrets
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: api-analytics-metrics
  namespace: api-analytics
  labels:
    app: api-analytics
spec:
  selector:
    matchLabels:
      app: api-analytics
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics